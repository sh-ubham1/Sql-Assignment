1.SQL code to create the messages and likes tables:
CREATE TABLE messages (
    message_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    message TEXT NOT NULL,
    timestamp TIMESTAMP NOT NULL
);

CREATE TABLE likes (
    like_id SERIAL PRIMARY KEY,
    message_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    timestamp TIMESTAMP NOT NULL
);
2.SQL code to create the trigger:
CREATE TRIGGER update_likes_count
AFTER INSERT OR DELETE ON likes
FOR EACH ROW
EXECUTE FUNCTION update_message_likes();
3.Flask routes and functions to handle creating and querying messages and likes:
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://username:password@host:port/dbname'
db = SQLAlchemy(app)

class Message(db.Model):
    message_id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, nullable=False)
    message = db.Column(db.String(140), nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)

class Like(db.Model):
    like_id = db.Column(db.Integer, primary_key=True)
    message_id = db.Column(db.Integer, nullable=False)
    user_id = db.Column(db.Integer, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)

@app.route('/messages', methods=['POST'])
def create_message():
    data = request.get_json()
    new_message = Message(user_id=data['user_id'], message=data['message'], timestamp=datetime.now())
    db.session.add(new_message)
    db.session.commit()
    return jsonify({'message': 'Message created successfully'}), 201

@app.route('/messages', methods=['GET'])
def get_all_messages():
    messages = Message.query.order_by(Message.timestamp.desc()).all()
    return jsonify([message.to_dict() for message in messages]), 200

@app.route('/messages/<int:message_id>/like', methods=['POST'])
def like_message(message_id):
    data = request.get_json()
    new_like = Like(message_id=message_id, user_id=data['user_id'], timestamp=datetime.now())
    db.session.add(new_like)
    db.session.commit()
    return jsonify({'message': 'Message liked successfully'}), 201

@app.route('/messages/<int:message_id>/likes', methods=['GET'])
def get_message_likes(message_